{"name":"Logo","body":"***Fase 3. Enunciado final del Proyecto Logo***\r\n\r\nEl proyecto Logo consiste en la implementación de un intérprete para una versión\r\nreducida escrita en castellano del lenguaje Logo. La calificación de dicho proyecto\r\nconstituye el 40% de la nota final de la asignatura. Además, es necesario aprobar este\r\nproyecto para superar la asignatura. Para superar este proyecto por evaluación continua\r\nes necesario entregarlo antes del 27 de mayo a través de una tarea habilitada en el\r\ncampus virtual. La defensa se llevará a cabo la semana del 28 de mayo.\r\n\r\n**1. Cuestiones que es importante tener en cuenta**\r\n\r\n1. Es necesario entregar el proyecto acompañado por una documentación en la que\r\nse prestará especial atención al diseño de las estructuras de datos auxiliares\r\nutilizadas en la implementación del intérprete. También es importante incluir una\r\nexplicación detallada de las ampliaciones realizadas en el proyecto.\r\n\r\n2. En el caso de que la gramática presente conflictos(s/r o r/r), estos deben\r\nexplicarse y justificarse en la documentación.\r\n\r\n3. Es posible escribir varias instrucciones en la misma línea. Una instrucción básica\r\n(ver apartado 2.1) no puede aparecer dividida en dos líneas diferentes, sin\r\nembargo las estructuras de control pueden ocupar varias líneas (utilizando los\r\ncorchetes como punto en el que realizar la división).\r\n\r\n4. Los comentarios (que aparecen precedidos por el símbolo '#') pueden aparecer\r\nen cualquier punto del programa.\r\n\r\n5. Cuando la invocación al intérprete no utiliza ningún parámetro la entrada del\r\nprograma se realizará a través del teclado. Sin embargo, si se utiliza un\r\nparámetro, se utilizará un fichero de entrada cuyo nombre será dicho parámetro.\r\n\r\n6. En la evaluación del proyecto se valorará:\r\n  1. la claridad de la gramática\r\n  2. la claridad y eficiencia del código C/C++ incluido en el proyecto.\r\n  3. la eficacia de las estructuras de datos definidas\r\n  7. Es conveniente que las dudas acerca del enunciado del proyecto se planteen en\r\n  el foro del aula virtual.\r\n\r\n\r\n**2. Lenguaje Logo**\r\n\r\n*2.1. Instrucciones básicas*\r\n\r\n1. avanza n\r\n(av n)\r\n\r\n2. retrocede n\r\n(re n)\r\n\r\n3. giraderecha n\r\n(gd n)\r\n\r\n4. giraizquierda n\r\n(gi n)\r\n\r\nEn estos casos n es una expresión numérica que admite valores negativos.\r\nPueden ser de tipo entero o de tipo real pero si el valor de la expresión es\r\nreal debe truncarse o redondearse para poder ejecutar correctamente los\r\nprocedimientos de la librería “Entorno”.\r\n\r\nEn el caso de valores negativos:\r\n1. av -n es equivalente a re n (y viceversa)\r\n2. gd -n es equivalente a gi n (y viceversa)\r\n\r\nocultatortuga\r\n(ot)\r\nmuestratortuga\r\n(mt)\r\nsubelapiz\r\n(sl)\r\nbajalapiz\r\n(bl)\r\nhaz “nombre_variable valor\r\n(ver apartado 2.3)\r\n\r\n\r\n*2.2. Instrucción de escritura*\r\n\r\nLa instrucción de escritura está formada por la palabra reservada “escribe” (la\r\nabreviatura es “es”) seguida por un parámetro que puede ser:\r\n• una cadena de caracteres (encerrada entre dobles comillas y sin espacios)\r\n• una expresión aritmética\r\n• una expresión lógica\r\n• el nombre de una variable\r\n\r\n\r\n*2.3. Utilización de variables e instrucciones de asignación. Nuevo*\r\n\r\nPara dar un nombre a una variable se pueden utilizar letras, dígitos y la barra baja. La\r\núnica restricción a tener en cuenta es que el nombre de una variable no puede ser un\r\nnúmero. Además, Logo no distingue entre mayúsculas y minúsculas.\r\n\r\nPara asignarle un valor a una variable se utiliza la palabra reservada “haz” seguida por\r\nel nombre de la variable (que debe ir precedido por el símbolo “) y el valor que se le\r\nasigna. En Logo no existe una instrucción para declarar el tipo de una variable y, por\r\ntanto, el tipo de la variable depende del valor que se le asigne y puede variar a lo largo\r\nde la ejecución del programa. La sintaxis de una instrucción de asignación es:\r\n\r\nhaz “nombre_variable valor\r\nvalor puede ser una expresión numérica, un número, una expresión lógica o una\r\ncadena de caracteres.\r\n\r\n\r\nCuando utilizamos el valor de una variable (por ejemplo, en una expresión o en una\r\ninstrucción de escritura), su nombre debe ir precedido por el símbolo :.\r\nCuando se utilicen los símbolos “ y : deben ir directamente concatenados al nombre de\r\nla variable, sin que aparezca ningún espacio en blanco entre ellos.\r\n\r\n\r\n*2.3.1. La tabla de símbolos*\r\n\r\nPara la ejecución y los controles semánticos de las instrucciones que utilizan variables\r\nserá necesario gestionar una estructura de datos auxiliar que almacene toda la\r\ninformación relevante acerca de las variables. Concretamente, será necesario\r\nalmacenar su nombre, su valor y su tipo.\r\n\r\nEjemplo de utilización de variables (en la columna de la derecha aparece la salida del\r\nprograma):\r\n  haz “num 100\r\n  haz “2num :num*2\r\n  es :num 100\r\n  es :2NUM 200\r\n  haz “num “hola”\r\n  haz “2Num 2<2+1\r\n  escribe :num hola\r\n  escribe :2num cierto\r\n  \r\n*2.4. Instrucción para borrar la pantalla. Nuevo*\r\n\r\nEl comando “borrapantalla” (la abreviatura es “bp”) borra la pantalla y coloca la tortuga\r\nen la posición inicial. Es necesario ampliar la librería “Entorno”.\r\n\r\n*2.5 Cambios de color. Nuevo*\r\n\r\nUtilizando la instrucción “poncl N” será posible cambiar el color del rastro que deja la\r\ntortuga. Es necesario modificar la librería “Entorno” (procedimiento “linea”). El color\r\ndefinido será utilizado hasta que cambie de nuevo:\r\n\r\nEjemplo:\r\n  poncl 0\r\n  poncl 1\r\n  poncl 2\r\n  poncl 3\r\n  poncl 4\r\n  poncl 5\r\n  poncl 6\r\n  poncl 7\r\n  poncl 8\r\n  #la tortuga deja un rastro de color negro (es el color inicial)\r\n  #la tortuga deja un rastro de color rojo\r\n  #la tortuga deja un rastro de color verde\r\n  #la tortuga deja un rastro de color amarillo\r\n  #la tortuga deja un rastro de color azul oscuro\r\n  #la tortuga deja un rastro de color rosa\r\n  #la tortuga deja un rastro de color azul claro\r\n  #la tortuga deja un rastro de color blanco\r\n  #la tortuga deja un rastro de color gris\r\n  \r\n  \r\n*2.6. Expresiones aritméticas y lógicas*\r\nPara definir expresiones aritméticas se pueden utilizar las operaciones: + - * /\r\nLas expresiones aritméticas pueden ser de tipo entero o real y esto deberá tenerse en\r\ncuenta en el control semántico de ciertas operaciones. Por ejemplo, el contador de las\r\nrepeticiones en un bucle debe ser de tipo entero. Una expresión será de tipo real si el\r\nvalor que resulta de su evaluación es un número real (con decimales).\r\n\r\nPara definir expresiones lógicas se pueden utilizar como comparadores tres\r\noperaciones: < > =\r\n\r\nLos tres operadores lógicos son: & | (operaciones binarias and y or respectivamente) no\r\n(operación unitaria). Ejemplo:\r\n  3<4 & no 2=1+1\r\n\r\n*2.7. Estructuras de control*\r\n\r\n*2.7.1. Bucle “repite”*\r\n\r\nLa sintaxis es:\r\n\r\n  repite n [ instrucción1 instruccion2 ... ]\r\nn es una expresión numérica de tipo entero, e indica el número de veces que se repiten\r\nlas instrucciones del bucle. Si el valor de n es real, es decir, un número con decimales,\r\nse debe mostrar un mensaje de error (ver apartado 3) y no ejecutar el bucle.\r\n\r\n*2.7.2. Estructura alternativa o condicional. Nuevo*\r\n\r\nEsta estructura de control puede utilizarse de dos formas diferentes:\r\n  • si condición [ instrucción1 instruccion2 ... ]\r\n  • si condición [ instr1 instr2 ... ] [ instr1' instr2' ... ]\r\n  \r\nEn cualquier caso las acciones encerradas entre el primer par de corchetes se\r\nejecutarán si la condición es cierta y, en el segundo caso, las que están encerradas\r\nentre el segundo par de corchetes se ejecutarán si la condición es falsa.\r\n\r\nHay que tener en cuenta que “condición” representa una expresión lógica o booleana y\r\nque “si” es una palabra reservada del lenguaje.\r\n\r\n*3. Errores semánticos+\r\nEl analizador semántico, se ocupará de controlar, utilizando para ello la información\r\nalmacenada en la tabla de símbolos, la correcta utilización de las variables. A\r\ncontinuación se detallan diferentes errores semánticos y los mensajes que, en cada\r\ncaso, aparecerían en la pantalla. Por supuesto, una instrucción que tenga errores\r\nsemánticos no se ejecutará.\r\n\r\n• Utilización de una variable que no existe.\r\nEjemplo:\r\n  haz “aa 25\r\n  escribe :a    a no tiene valor\r\n\r\n• Utilización en un bucle de una expresión que no tiene un valor entero.\r\nEjemplo:\r\n  haz “aa 2.5\r\n  repite :aa [gd 90] 2.5 no es un número entero!\r\n  repite :aa*3 [gd 90] 7.5 no es un número entero!\r\n  \r\n• Utilización, en expresiones aritméticas o lógicas, de variables que no tienen el\r\ntipo adecuado.\r\n\r\nEjemplo:\r\n  haz “aa “hola”\r\n  escribe :aa * 2 “hola” no es un número!\r\n  escribe :aa < 23 “hola” no es un número!\r\n  repite :aa [av 100] “hola” no es un número!\r\n  haz “bb 2>3\r\n  repite :bb [av 100]\r\n  falso no es un número!\r\n  \r\n  \r\n**4. Ampliaciones opcionales del proyecto Logo**\r\nCumpliendo todos los requisitos descritos anteriormente (esto también incluye todos los\r\naspectos del lenguaje que aparecen en las fases 1 y 2) se puede obtener una\r\ncalificación máxima de 6 si el proyecto se ha realizado en pareja o de 8 si se ha\r\nrealizado de forma individual. Para poder obtener una calificación mas alta será\r\nnecesario realizar alguna de las ampliaciones que se indican a continuación. Las\r\nampliaciones realizadas deben describirse cuidadosamente en la documentación.\r\n\r\n\r\n*4.1. Giros con cualquier ángulo (hasta 2 puntos)*\r\n\r\nSe elimina la restricción de que los ángulos empleados en el giro deban ser múltiplos de\r\n90 grados. Esto aumenta la complejidad en el cálculo de la nueva posición de la tortuga.\r\nEs necesario modificar la librería “Entorno” (procedimiento “pon_tortuga”). Si los ángulo\r\nsaceptados sólo puedes ser múltiplos de 45o la nota aumentará, como máximo, 1 punto.\r\n\r\n*4.2. Anidamiento de estructuras de control (hasta 4 puntos)*\r\n\r\nPor ejemplo, puede aparecer un bucle dentro de otro, una sentencia si dentro de un\r\nbucle, etc. Desde un punto de vista gramatical, este hecho no representa ninguna\r\ncomplejidad. Sin embargo, para que las instrucciones incluidas en los bucles puedan\r\nejecutarse correctamente, será necesario diseñar estructuras de datos jerarquizadas\r\nque permitan almacenarlas convenientemente.\r\nSi las instrucciones incluidas en las estructuras que se anidan son básicas y no\r\nrequieren el cálculo de expresiones, esta ampliación sólo sumará 2 puntos como\r\nmáximo.\r\n\r\n*4.3. Procedimientos (hasta 4 puntos)*\r\n\r\nPara definir un procedimiento hay que utilizar la palabra “para” seguida del nombre que\r\nqueramos dar al procedimiento y acabar con la palabra “fin”. Una vez definido el\r\nprocedimiento, basta escribir su nombre para que se ejecute. El procedimiento puede\r\ntener parámetros (para simplificar el problema supondremos que sólo hay un\r\nparámetro).\r\nEjemplo de procedimiento sin parámetro:\r\n  para cuadrado\r\n  repite 4 [av 100 gd 90]\r\n  fin\r\n  ot\r\n  cuadrado\r\n  #ésta es la llamada\r\n  Ejemplo de procedimiento con parámetro:\r\n  para cuadrado “lado\r\n  repite 4 [av :lado gd 90]\r\n  fin\r\n  ot\r\n  cuadrado 50\r\n  #ésta es la llamada\r\n\r\nIgual que ocurre con los bucles, será necesario almacenar las instrucciones del\r\nprocedimiento en una estructura auxiliar.\r\nSi los procedimientos no admiten parámetros, las instrucciones incluidas en él son\r\nbásicas y no requieren el cálculo de expresiones, está ampliación sólo sumará 2 puntos\r\ncomo máximo.\r\n\r\n*4.4. Cálculo de expresiones con variables dentro de un bucle (hasta 4 puntos)*\r\n\r\nPara poder ejecutar dentro de una estructura de control o de un procedimiento una\r\ninstrucción en la que aparece una expresión que incluye variables, será necesario\r\nalmacenar en una estructura auxiliar (lo más apropiado es un árbol) la expresión para\r\nque pueda ser evaluada tantas veces como se repita el bucle o cada vez que se invoque\r\nal procedimiento.\r\nEjemplo:\r\n  haz “a 100\r\n  repite 5 [\r\n  avanza :a\r\n  gd 90\r\n  haz “a :a+100\r\n  ]\r\n\r\n","tagline":"Proyecto de Talf","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}